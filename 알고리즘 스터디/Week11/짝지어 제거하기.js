// [PGS] 짝지어 제거하기, +11
// 소요시간 37.11분

// (효율성 테스트 실패, 1차시도) 
// 문자열을 split 메서드를 이용해 배열로 변환 후 비교시작
// i번째 요소와 i+1번째 요소로 하나하나 비교 진행하며 
// 같으면 splice메서드를 이용해 삭제하도록 진행함 
// 엄청 오래걸림 

// 테스트 1 〉	통과 (0.04ms, 33.5MB)
// 테스트 2 〉	통과 (1813.41ms, 39.4MB)
// 테스트 3 〉	통과 (6092.36ms, 39.2MB)
// 테스트 4 〉	통과 (7385.38ms, 38.2MB)
// 테스트 5 〉	통과 (7484.61ms, 38.1MB)
// 테스트 6 〉	통과 (7541.67ms, 38.1MB)
// 테스트 7 〉	통과 (7458.23ms, 38.2MB)
// 테스트 8 〉	통과 (7029.67ms, 38.2MB)
// 테스트 9 〉	통과 (0.04ms, 33.4MB)
// 테스트 10 〉	통과 (0.14ms, 33.4MB)
// 테스트 11 〉	통과 (0.04ms, 33.4MB)
// 테스트 12 〉	통과 (0.04ms, 33.5MB)
// 테스트 13 〉	통과 (0.04ms, 33.4MB)
// 효율성  테스트
// 테스트 1 〉	실패 (시간 초과)
// 테스트 2 〉	실패 (시간 초과)
// 테스트 3 〉	실패 (시간 초과)
// 테스트 4 〉	실패 (시간 초과)
// 테스트 5 〉	실패 (시간 초과)
// 테스트 6 〉	실패 (시간 초과)
// 테스트 7 〉	실패 (시간 초과)
// 테스트 8 〉	실패 (시간 초과)
function solution(s){
  let arr = s.split('');
  
  for(let i = 0; i < arr.length; ){
    if(arr[i] === arr[i+1]){
      arr.splice(i, 2);
      i = 0; 
    }else i++; 
  }
  
  return arr.length === 0 ? 1 : 0;
}

// -----------------------
// (성공), stack 이용 => Last In First Out 
// 테스트 1 〉	통과 (0.05ms, 33.5MB)
// 테스트 2 〉	통과 (9.34ms, 38.4MB)
// 테스트 3 〉	통과 (6.69ms, 38.9MB)
// 테스트 4 〉	통과 (6.82ms, 39.2MB)
// 테스트 5 〉	통과 (6.82ms, 39.2MB)
// 테스트 6 〉	통과 (6.71ms, 39.2MB)
// 테스트 7 〉	통과 (10.40ms, 39.2MB)
// 테스트 8 〉	통과 (7.69ms, 39.3MB)
// 테스트 9 〉	통과 (0.07ms, 33.5MB)
// 테스트 10 〉	통과 (0.16ms, 33.5MB)
// 테스트 11 〉	통과 (0.06ms, 33.5MB)
// 테스트 12 〉	통과 (0.06ms, 33.5MB)
// 테스트 13 〉	통과 (0.05ms, 33.4MB)
// 효율성  테스트
// 테스트 1 〉	통과 (48.45ms, 58.2MB)
// 테스트 2 〉	통과 (60.52ms, 41.8MB)
// 테스트 3 〉	통과 (32.14ms, 51.3MB)
// 테스트 4 〉	통과 (32.25ms, 51.4MB)
// 테스트 5 〉	통과 (32.25ms, 51.2MB)
// 테스트 6 〉	통과 (32.10ms, 51.3MB)
// 테스트 7 〉	통과 (34.76ms, 51.2MB)
// 테스트 8 〉	통과 (38.44ms, 58.5MB)

// 나중에 쌓인 것이 먼저 나오게 됨 
// push, pop 이용 -> 뒤에서부터 확인하도록 
// 비교를 진행할 새 배열을 만들어 새 배열의 길이 -1 즉, 마지막요소를 비교 (나중에 들어온 것부터 비교이기 때문) 
// 새 배열의 마지막요소가 비교할 문자열과 다르면 문자열 추가, 같으면 새 배열에 pop메서드로 요소 삭제 
// 문자열 길이만큼 다 돌고 난 후 남은 길이로 판별 

function solution(s){
  let result = [];
  
  for(i of s){
  result[result.length-1] === i ? result.pop() : result.push(i);
  }
  
  return result.length === 0 ? 1 : 0;

}