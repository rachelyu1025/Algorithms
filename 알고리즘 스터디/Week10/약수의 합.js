  //[PGS] 약수의 합 , +3

   // result = 1+n 
   // 제곱근을 구하고 제곱근까지 2부터 반복하며, 
    // n을 i로 나누었을때 나머지가 0이 된다면 result 변수에 i와 나머지 값을 더한다.

// 풀이 1 -> 너무 어렵게 생각했다. 
// 테스트 1 〉	통과 (0.04ms, 33.4MB)
// 테스트 2 〉	통과 (0.04ms, 33.5MB)
// 테스트 3 〉	통과 (0.04ms, 33.5MB)
// 테스트 4 〉	통과 (0.04ms, 33.5MB)
// 테스트 5 〉	통과 (0.11ms, 33.3MB)
// 테스트 6 〉	통과 (0.04ms, 33.4MB)
// 테스트 7 〉	통과 (0.11ms, 33.4MB)
// 테스트 8 〉	통과 (0.04ms, 33.4MB)
// 테스트 9 〉	통과 (0.11ms, 33.4MB)
// 테스트 10 〉	통과 (0.12ms, 33.5MB)
// 테스트 11 〉	통과 (0.11ms, 33.5MB)
// 테스트 12 〉	통과 (0.12ms, 33.4MB)
// 테스트 13 〉	통과 (0.04ms, 33.4MB)
// 테스트 14 〉	통과 (0.11ms, 33.5MB)
// 테스트 15 〉	통과 (0.11ms, 33.5MB)
// 테스트 16 〉	통과 (0.04ms, 33.4MB)
// 테스트 17 〉	통과 (0.11ms, 33.4MB)
    function solution(n) {
 
      let result = 1+n;
      const sqrt = Math.floor(Math.sqrt(n));
      
      if(n <= 1) return n;
      
      for(let i=2; i <= sqrt; i++){
       if(n % i === 0) {
          i === (n / i) ? result += i : result += i + (n / i) ;
       }
      }
      
      return result; 
  }

//  풀이 2
// 테스트 1 〉	통과 (0.04ms, 33.5MB)
// 테스트 2 〉	통과 (0.04ms, 32.5MB)
// 테스트 3 〉	통과 (0.06ms, 33.2MB)
// 테스트 4 〉	통과 (0.05ms, 33.6MB)
// 테스트 5 〉	통과 (0.08ms, 33.6MB)
// 테스트 6 〉	통과 (0.06ms, 33.5MB)
// 테스트 7 〉	통과 (0.09ms, 33.5MB)
// 테스트 8 〉	통과 (0.05ms, 33.4MB)
// 테스트 9 〉	통과 (0.08ms, 33.4MB)
// 테스트 10 〉	통과 (0.10ms, 33.5MB)
// 테스트 11 〉	통과 (0.08ms, 33.6MB)
// 테스트 12 〉	통과 (0.09ms, 33.5MB)
// 테스트 13 〉	통과 (0.04ms, 33.6MB)
// 테스트 14 〉	통과 (0.09ms, 33.5MB)
// 테스트 15 〉	통과 (0.09ms, 33.4MB)
// 테스트 16 〉	통과 (0.04ms, 33.5MB)
// 테스트 17 〉	통과 (0.11ms, 33.5MB)
function solution(n) {
  result = 0; 
  for(let i = 0; i <= n; i++){
      if(n % i === 0) result += i;
  }
  
  return result;
}