//[PGS] 숫자의 표현, +7
//수학적 접근을 못하겠음 ㅠㅠ

// 정확성  테스트
// 테스트 1 〉	통과 (0.05ms, 33.6MB)
// 테스트 2 〉	통과 (0.19ms, 33.5MB)
// 테스트 3 〉	통과 (0.17ms, 33.5MB)
// 테스트 4 〉	통과 (0.18ms, 33.4MB)
// 테스트 5 〉	통과 (0.20ms, 33.6MB)
// 테스트 6 〉	통과 (0.15ms, 33.4MB)
// 테스트 7 〉	통과 (0.27ms, 33.5MB)
// 테스트 8 〉	통과 (0.15ms, 33.5MB)
// 테스트 9 〉	통과 (0.21ms, 33.4MB)
// 테스트 10 〉	통과 (0.32ms, 33.4MB)
// 테스트 11 〉	통과 (0.26ms, 33.4MB)
// 테스트 12 〉	통과 (0.21ms, 33.5MB)
// 테스트 13 〉	통과 (0.28ms, 33.4MB)
// 테스트 14 〉	통과 (0.19ms, 33.5MB)
// 테스트 15 〉	통과 (0.05ms, 33.5MB)
// 테스트 16 〉	통과 (0.05ms, 33.4MB)
// 테스트 17 〉	통과 (0.14ms, 33.4MB)
// 테스트 18 〉	통과 (0.05ms, 33.5MB)
// 효율성  테스트
// 테스트 1 〉	통과 (1.64ms, 35.4MB)
// 테스트 2 〉	통과 (1.32ms, 35.3MB)
// 테스트 3 〉	통과 (1.39ms, 35.4MB)
// 테스트 4 〉	통과 (1.53ms, 35.2MB)
// 테스트 5 〉	통과 (1.65ms, 35.3MB)
// 테스트 6 〉	통과 (1.65ms, 35.3MB)

function solution(n) {
  // 자기자신 , 연속한 자연수의 합으로 구성!

  let count = 0; // 연속된 자연수의 합으로 n이 나온 개수
  
  for(let i = 1; i < (n / 2); i++){ // 절반이상부터는 연속된 합이 n보다 크기때문
      if(sum(n, i)) count++; // sum 함수의 값이 true 인 경우에만 count 값 추가
  }
  
  return count+1; // 자기자신을 포함하기 위해 +1을 해준다 
}

function sum(n, num){
  let temp = 0; 
  
  for(let i = num ; i < n; i++){
      temp += i; // 연속된 합을 구하기 위한 연산 
      
      if(temp === n) return true; // 수들의 합(temp)이 n과 같으면 true 리턴
      else if(temp > n) break; // 수들의 합이 n보다 크면 함수 종료 
  }
}